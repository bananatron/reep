
//////////////
// Helpers //
////////////

var validateModel = function(model){ //Maybe put in notifications here?
  if (model.summary == "" || model.summary == undefined) return false;
  if (model.score == 0 || model.score == undefined) return false

  return true;
}

var toggleSelected = function(self){
  if ( $(self).attr('data-selected') == 'true' ) {
    $(self).attr('data-selected', 'false'); 
  } else {
    $(self).attr('data-selected', 'true'); 
  }
}

var loggedIn = function loggedIn(){
  var authData = ref.getAuth();
  if (authData) {
    return true;
    console.log("User " + authData.uid + " is logged in via " + authData.provider);
  } else {
    return false;
    console.log(authData);
    console.log("User is logged out");
  }
}

var ref = new Firebase("https://reep.firebaseio.com");


var isNewUser = function() {
  var uid = ref.getAuth().uid.toString();
  var userRef = ref.child('users').child(uid);
  userRef.once("value", function(snapshot) {
    return true;
  }, function (errorObject) {
    return false;
  });
}




//Listeners

//Store new user creds on first signin (fb)
ref.onAuth(function(authData) {
  
  if (authData && isNewUser) {
    if (authData.password.email){
      ref.child("users").child(authData.uid).set({
        email: authData.password.email,
        provider: authData.provider
      });
    } else {
      ref.child("users").child(authData.uid).set({
        provider: authData.provider
      });
    }
  }
  
});

//Login button
$('#user-login').on('click', function(){

  ref.authWithPassword({
    email    : $('#login-email-input').val().trim(),
    password : $('#login-pass-input').val().trim()
  }, function(error, authData) {
    if (error) {
      if (error.toString().indexOf('user does not exist') != -1){
        
        var removeYellow = function(){
          $('#user-register').addClass('bg-darkblue');
          $('#user-register').removeClass('bg-yellow');
        }
        $('#user-register').addClass('bg-yellow');
        $('#user-register').removeClass('bg-darkblue');
        
        new Notification( 
          "That user doesn't exist, but you can <span class='bg-yellow'>register</span> below with that information",'alert', removeYellow 
        );
        
      } else {
        if (authData === undefined){
          new Notification("That's not valid user info", 'alert');
        } else {
          new Notification(authData);
        }
       
      }
    } else {
      //new Notification("Login succesful!");
      window.location.href = "/";
    }
  });
});


//Register button
$('#user-register').on('click', function(){
  ref.createUser({
    email    : $('#login-email-input').val().trim(),
    password : $('#login-pass-input').val().trim()
  }, function(error, userData) {
    if (error) {
      new Notification(error, 'alert' );
    } else {
      console.log(userData, userData.uid);
      new Notification( "Hoorah - You've created an account!" );
    }
  });
});

//Reset email option
$('#user-resetpass').on('click', function(){
  ref.resetPassword({
      email : $('#login-email-input').val().trim(),
    }, function(error) {
    if (error === null) {
      new Notification("Password reset email sent successfully");
    } else {
      if (error.toString().indexOf('Route') != -1) {
        new Notification('Please enter your email below so we can get you reset', 'alert')
      } else {
        new Notification(error, 'alert');
      }
    }
  });
});

// It is of great use to the sailor to know the length of his line, 
// though he cannot with it fathom all the depths of the ocean.
//  -John Locke

/////////////////
// Navigation //
///////////////

if (loggedIn()){
  
  //Login / Logout nav
  var $loginlink = $('#login-link');
  $loginlink.children().text('Logout');
  $loginlink.on('click', function(){
    ref.unauth();
  });
  
  //Add Task
  $('#add-task').show();
}

// Every once in a while, someone will mail me a single popcorn kernel that didn't pop. 
// I'll get out a fresh kernel, tape it to a piece of paper and mail it back to them.
// - Orville Redenbacher

////////////////////
// Notifications //
//////////////////

function Notification(text, type, trigger) {
  this.text = text;
  this.type = type || "";
  
  this.init = function(){
    var note = $("<div class='note " + this.type + "' >" + this.text + "<span class='notification__close ion-close-circled'></span></div>");
    $('.notifications').append(note);
    if (trigger){
      $(note).on('click', function(){ trigger()  })
    }
  }
  
  this.init();
}

$('.notifications').on('click', function(){
  if ($(event.target).attr('class').indexOf('note') != -1){
    var nn = event.target;
    $(nn).slideUp( 200, function() {
      $(nn).remove();
    })
  }
});


var Task = {
    title: "",
    details: "",
    score: 0,
    focus: []
}

var submitTaskForm = function(){
  ref.child("tasks").child(uid).push({
    title: Task.title,
    details: Task.details,
    score: Task.score,
    focus: Task.focus,
    complete: false,
    added_at: Firebase.ServerValue.TIMESTAMP,
    public: false
  });
  
  clearTaskForm(); //Empties form
  hideNewTaskForm(); //Rolls it up
}

var clearTaskForm = function(){
  $('.task-form-field').val('');
  $('.focus_option, .score_option').attr('data-selected', 'false')
  
  Task = { 
    title: "",
    details: "",
    score: 0,
    focus: [],
    complete: false
  }
  
}

var validateModel = function() {
  //!! WRITE this shit
  return true;
}

var clearTasks = function(){
  $('.tasks_container').empty();
}

var buildTask = function(id, title, details, score, focus, complete) {
  
  var task = this.view = document.createElement("div");
  task.setAttribute('class', 'task');
  task.setAttribute('data-id', id);
  
    var task_header = task.appendChild(document.createElement("div"));
    task_header.setAttribute('class', 'task__header');
      var header_focus = task_header.appendChild(document.createElement("div"));
      header_focus.setAttribute('class', 'header_focus');
      header_focus.innerHTML = "<span class='ion-coffee'></span>";
      var header_title = task_header.appendChild(document.createElement("div"));
      header_title.setAttribute('class', 'header_title');
      header_title.innerHTML = title;
      var header_score = task_header.appendChild(document.createElement("div"));
      header_score.setAttribute('class', 'header_score');
      header_score.innerHTML = "<span class='ion-flash'></span>" + score + "</div>";
      
    var task_body = task.appendChild(document.createElement("div"));
    task_body.setAttribute('class', 'task__body bg-darkblue');
      var task__body_details = task_body.appendChild(document.createElement("div"));
      task__body_details.setAttribute('class', 'task__body_details');
      task__body_details.innerHTML = details;
      
      var task__body_actions = task_body.appendChild(document.createElement("div"));
      task__body_actions.setAttribute('class', 'task__body_actions');
        var task_action = task__body_actions.appendChild(document.createElement("div"));
        task_action.setAttribute('class', 'task__action bg-green-hover');
        task_action.setAttribute('data-action', 'completeTask');
        task_action.innerHTML = "<span class='ion-checkmark'></span>";
        var task_action = task__body_actions.appendChild(document.createElement("div"));
        task_action.setAttribute('class', 'task__action bg-red-hover');
        task_action.setAttribute('data-action', 'deleteTask');
        task_action.innerHTML = "<span class='ion-close'></span>";
        
  return task;
}

var getIdFromElement = function(element){
  return $(element).closest('.task').attr('data-id');
}

var deleteTask = function(node){
  var rid = getIdFromElement(node);
  $(node).closest('.task').hide();
  ref.child("tasks").child(uid).child(rid).set(null);
}

var completeTask = function(node){
  var rid = getIdFromElement(node);
  ref.child("tasks").child(uid).child(rid).update({complete: true});
}


//Listeners
if (ref.getAuth()){
    
  var uid = ref.getAuth().uid;
  
  //On change, reflow
  ref.child('tasks').child(uid).on('value', function(snapshot) {
    if (!$.isEmptyObject(snapshot.val())){
      $('.no-tasks-message').hide();
      var task_collection = $('<div></div>');
      clearTasks();
      $.each( snapshot.val(), function( key, value ) {
        task_collection.append(buildTask(key, value.title, value.details, value.score, value.focus, value.complete));
      }); 
      $('.tasks_container').append($(task_collection).children().get().reverse());
      $('.tasks_container').addClass('unhidden');
    } else { //Case where you're deleting the last one
      clearTasks();
      $('.no-tasks-message').show();
    }
  });

} else { console.log("No user logged in.") }


//Show/hide new form
var hideNewTaskForm = function(){
  $( "#task-new" ).slideUp( "fast", function() {
    $( "#task-new" ).hide();
  });
}
$('.task-new__close').on('click', function(){
  hideNewTaskForm();
});

var showNewTaskForm = function(){
  $( "#task-new" ).slideDown( "fast", function(){
    $( "#task-new" ).show();
  })
}
$('#add-task').on('click', function(){
  showNewTaskForm();
});


//Task header toggle
$('.tasks_container').on('click', '.task__header', function() {
  $(this).parent().find('.task__body').slideToggle(100);
});

//Task Action Buttons
$('.tasks_container').on('click', '.task__action', function() {
  window[$(this).attr('data-action').toString()](this);
});



//Text Inputs
$('.task__input').on('keyup', function(){ //Title
  Task.title = $(this).val();
})
$('.task__textarea').on('keyup', function(){ //Details
  Task.details = $(this).val();
})



//Focus Selection
$('.focus_option').on('click', function(){
  toggleSelected(this);
  
  //Modify model
  Task.focus = [];
  $('.focus_option[data-selected="true"]').each(function( ii, node ) {
    Task.focus.push( $(node).text() );
  });
});


//Score Selection
$('.score_option').on('click', function(){
  $('.score_option[data-selected="true"]').attr('data-selected', 'false');
  toggleSelected(this);
  Task.score = parseInt( $(this).text().trim() )
});


//Submit button
$('#task_submit').on('click', function(){
  if (validateModel(Task)){
    submitTaskForm();
  };
});

//# sourceMappingURL=data:application/json;base64,